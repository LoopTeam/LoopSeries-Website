<?php

namespace LoopAnime\ShowsBundle\Entity;

use LoopAnime\AppBundle\Entity\BaseRepository;
use LoopAnime\UsersBundle\Entity\Users;
use Symfony\Component\HttpFoundation\Session\Session;

/**
 * AnimesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AnimesRepository extends BaseRepository
{

    /**
     * @param $idEpisode
     * @param bool $getQuery
     * @return \Doctrine\ORM\Query|null|Animes
     */
    public function getAnimeByEpisode($idEpisode, $getQuery = false)
    {
        $q = $this->createQueryBuilder('a')
                ->select('a')
                ->join('a.animesSeasons', 'ase')
                ->join('ase.animesEpisodes', 'ae')
                ->where('ae.id = :idEpisode')
                ->setParameter('idEpisode', $idEpisode)
                ->getQuery();

        if ($getQuery)
            return $q;
        else
            return $q->getOneOrNullResult();
    }

    /**
     * @param $title
     * @param string $orderKey
     * @param string $order
     * @param bool $getQuery
     * @return array|\Doctrine\ORM\Query|Animes|null
     */
    public function getAnimesByTitle($title, $orderKey = "title", $order = "ASC", $getQuery = true)
    {
        $query = $this->createQueryBuilder("animes")
            ->select("animes")
            ->where('animes.title LIKE :title')
            ->orderBy("animes." . $orderKey, $order)
            ->setParameter("title", '' . $title . '%')
            ->getQuery();

        if ($getQuery) {
            return $query;
        } else {
            return $query->getResult();
        }
    }

    public function getAnimesRecent($getQuery = true)
    {
        $query = $this->createQueryBuilder("animes")
            ->select("animes")
            ->orderBy("animes.startTime", "DESC")
            ->getQuery();

        if ($getQuery) {
            return $query;
        } else {
            return $query->getResult();
        }
    }

    public function getAnimesMostRated($getQuery = true)
    {
        $query = $this->createQueryBuilder("animes")
            ->select("animes")
            ->orderBy("animes.ratingUp", "DESC")
            ->addOrderBy("animes.ratingCount", "DESC")
            ->getQuery();

        if ($getQuery) {
            return $query;
        } else {
            return $query->getResult();
        }
    }

    public function getGenres($getQuery = true)
    {
        $query = $this->createQueryBuilder("animes")
            ->select("animes.genres")
            ->distinct(true)
            ->getQuery();

        if ($getQuery) {
            return $query;
        } else {
            return $query->getResult();
        }
    }

    public function getAnimesByGenres($genre, $notIn = "", $getQuery = true)
    {
        $query = $this->createQueryBuilder("animes")
            ->select("animes")
            ->where("animes.genres LIKE :genre")
            ->andWhere('animes.genres IS NOT NULL')
            ->andWhere('animes.poster IS NOT NULL')
            ->setParameter("genre", '%' . $genre . '%');

        if ($notIn !== "") {
            $query->andWhere("animes.id NOT IN(:notIn)")
                ->setParameter("notIn", $notIn);
        }

        if ($getQuery) {
            return $query->getQuery();
        } else {
            return $query->getQuery()->getResult();
        }
    }

    public function getTotalSeasons() {

    }

    public function getTotSeen(Users $user, Animes $anime) {
        /** @var ViewsRepository $viewsRepo */
        $viewsRepo = $this->getEntityManager()->getRepository('LoopAnimeShowsBundle:Views');
        return $viewsRepo->getTotViews($user, true, $anime);
    }

    public function getTotEpsiodes(Animes $anime) {
        /** @var AnimesEpisodesRepository $aEpisodesRepo */
        $aEpisodesRepo = $this->getEntityManager()->getRepository('LoopAnimeShowsBundle:AnimesEpisodes');
        return $aEpisodesRepo->getTotEpisodes($anime);
    }

    public function getTotSeasons(Animes $anime) {
        /** @var AnimesSeasonsRepository $aEpisodesRepo */
        $seasonsRepo = $this->getEntityManager()->getRepository('LoopAnimeShowsBundle:AnimesSeasons');
        return $seasonsRepo->getTotSeasons($anime);
    }

    public function getStats(Users $user, Animes $anime) {
        return [
            "tot_seen" => $this->getTotSeen($user, $anime),
            "tot_episodes" => $this->getTotEpsiodes($anime),
            "tot_seasons" => $this->getTotSeasons($anime)
        ];
    }

    public function setRatingOnEpisode(Users $user, $idAnime, $ratingUp)
    {
        /** @var AnimesEpisodes $anime */
        $anime = $this->find($idAnime);

        $session = new Session();
        $checksArr = $session->get('checks');
        if (isset($checksArr['rating']['anime'])) {
                    $checkRatings = $checksArr['rating']['anime'];
        } else {
                    $checkRatings = array();
        }

        // Check if there is a rate already
        if (isset($checkRatings[$idAnime])) {
            // Change of hear - Up to Down
            if ($checkRatings[$idAnime] == "up" && !$ratingUp) {
                $anime->setRatingUp($anime->getRatingUp() - 1);
                $anime->setRatingDown($anime->getRatingDown() + 1);
            } elseif ($checkRatings[$idAnime] == "down" && $ratingUp) {
                $anime->setRatingUp($anime->getRatingUp() + 1);
                $anime->setRatingDown($anime->getRatingDown() - 1);
            }
        } else {
            $anime->setRatingCount($anime->getRatingCount() + 1);
            if ($ratingUp) {
                            $anime->setRatingUp($anime->getRatingUp() + 1);
            } else {
                            $anime->setRatingDown($anime->getRatingDown() + 1);
            }
        }

        $this->_em->persist($anime);
        $this->_em->flush($anime);

        // Sets on Session what pick he choose
        $checksArr['rating']['anime'][$idAnime] = ($ratingUp ? "up" : "down");
        $session->set('checks', $checksArr);
        return [
            "likes" => $anime->getRatingUp(),
            "dislikes" => $anime->getRatingDown()
        ];
    }

    public function getFeaturedAnimes()
    {
        $query = $this->createQueryBuilder('a')
            ->select('a')
            ->orderBy('a.ratingCount', 'DESC')
            ->addOrderBy('a.ratingUp', 'DESC')
            ->setMaxResults(4);
        return $query->getQuery()->getResult();
    }

    public function getAnimeStats(Animes $idAnime)
    {
        $totComments = 0;
        try {
            $totComments = $this->_em->getRepository("LoopAnimeCommentsBundle:Comments")->getCommentsByAnime($idAnime, false)->getSingleScalarResult();
        } catch (\Exception $e) {}
        $totFavorites = $this->_em->getRepository("LoopAnimeUsersBundle:UsersFavorites")->getTotalAnimeFavorites($idAnime);
        return ['totComments' => $totComments, 'totFavorites' => $totFavorites];
    }

}
