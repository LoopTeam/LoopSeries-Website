<?php

namespace LoopAnime\UsersBundle\Entity;

use LoopAnime\AppBundle\Entity\BaseRepository;
use LoopAnime\ShowsBundle\Entity\ViewsRepository;

/**
 * UsersRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UsersRepository extends BaseRepository
{

    public function getAllUsers($getQuery = true)
    {
        $query = $this->createQueryBuilder("users")
            ->select("users")
            ->orderBy('users.id', 'ASC')
            ->getQuery()
            ;

        if ($getQuery) {
            return $query;
        } else {
            return $query->getResult();
        }
    }

    public function getUser($idUser)
    {
        $query = $this->createQueryBuilder("users")
            ->select("users")
            ->where("users.id = :idUser")
            ->setParameter("idUser", $idUser)
            ->getQuery();

        return $query->getOneOrNullResult();
    }

    public function getTotFav(Users $user)
    {
        /** @var UsersFavoritesRepository $userFavoritesRepo */
        $userFavoritesRepo = $this->getEntityManager()->getRepository('LoopAnimeUsersBundle:UsersFavorites');
        return $userFavoritesRepo->getTotFav($user);
    }

    public function getTotViews(Users $user, $completed = true)
    {
        /** @var ViewsRepository $ViewsRepo */
        $ViewsRepo = $this->getEntityManager()->getRepository('LoopAnimeShowsBundle:Views');
        return $ViewsRepo->getTotViews($user, $completed);
    }

    public function getTrackNewEpisodes(Users $user)
    {
        /** @var UsersFavoritesRepository $userFavoritesRepo */
        $userFavoritesRepo = $this->getEntityManager()->getRepository('LoopAnimeUsersBundle:UsersFavorites');
        return $userFavoritesRepo->getTrackNewEpisodes($user);
    }

    public function getTrackToSeeEpisodes(Users $user)
    {
        /** @var UsersFavoritesRepository $userFavoritesRepo */
        $userFavoritesRepo = $this->getEntityManager()->getRepository('LoopAnimeUsersBundle:UsersFavorites');
        return $userFavoritesRepo->getTrackToSeeEpisodes($user);
    }

    public function getStats(Users $user)
    {
        $stats = [];

        $stats["tot_fav"]           = $this->getTotFav($user);
        $stats["tot_seen"]          = $this->getTotViews($user, true);
        $stats["tot_onProgress"]    = $this->getTotViews($user, false);
        $stats["tot_newEpisodes"]   = $this->getTrackNewEpisodes($user);
        $stats["tot_2see"]          = $this->getTrackToSeeEpisodes($user);

        return $stats;
    }

    public function getUsersForSync()
    {
        $query = $this->createQueryBuilder("users")
            ->select("users")
            ->where("users.trakt_access_token IS NOT NULL")
            ->orWhere("users.MALUsername IS NOT NULL")
            ->getQuery();

        return $query->getResult();
    }

}
