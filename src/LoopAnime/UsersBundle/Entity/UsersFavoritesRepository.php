<?php

namespace LoopAnime\UsersBundle\Entity;

use LoopAnime\AppBundle\Entity\BaseRepository;
use LoopAnime\ShowsBundle\Entity\Animes;
use LoopAnime\ShowsBundle\Entity\AnimesEpisodesRepository;
use LoopAnime\ShowsBundle\Entity\AnimesSeasonsRepository;
use LoopAnime\ShowsBundle\Entity\ViewsRepository;

/**
 * Users_FavoritesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UsersFavoritesRepository extends BaseRepository
{

    public function getTotFav(Users $user)
    {
        $idUser = $user->getId();
        $query = $this->createQueryBuilder("usersFavorites")
            ->select('COUNT(usersFavorites.id)')
            ->where("usersFavorites.idUser = :idUser")
            ->setParameter('idUser', $idUser)
            ->getQuery();
        return $query->getSingleScalarResult();
    }

    public function getTrackNewEpisodes(Users $user)
    {
        $idUser = $user->getId();
        $lastLogin = $user->getLastLogin();
        if (empty($lastLogin)) {
            $lastLogin = $user->getCreateTime();
        }

        $query = $this->createQueryBuilder("usersFavorites")
            ->select('COUNT(usersFavorites.id)')
            ->join("usersFavorites.anime", 'animes')
            ->join("animes.animesSeasons", 'seasons')
            ->join('seasons.animesEpisodes', 'episodes')
            ->leftJoin('episodes.episodeViews', 'views')
            ->where("views.idUser = :idUser")
            ->andWhere("episodes.airDate BETWEEN '" . $lastLogin->format('Y-m-d H:i:s') . "' AND CURRENT_TIMESTAMP()")
            ->setParameter('idUser', $idUser)
            ->getQuery();
        return $query->getSingleScalarResult();
    }

    public function getTrackToSeeEpisodes(Users $user)
    {
        $idUser = $user->getId();
        $query = $this->createQueryBuilder("usersFavorites")
            ->select('COUNT(usersFavorites.id)')
            ->join("usersFavorites.anime", 'animes')
            ->join("animes.animesSeasons", 'seasons')
            ->join('seasons.animesEpisodes', 'episodes')
            ->leftJoin('episodes.episodeViews', 'views')
            ->where("views.idUser = :idUser")
            ->andWhere("(views.id IS NULL OR views.completed = 0)")
            ->setParameter('idUser', $idUser)
            ->getQuery();
        return $query->getSingleScalarResult();
    }

    /**
     * @param Users|null $user
     * @param $idAnime
     * @return bool
     */
    public function isAnimeFavorite($user, $idAnime)
    {
        if ($user === null) {
            return false;
        }
        $q = $this->createQueryBuilder('uf')
                ->select('uf')
                ->where('uf.idUser = :idUser')
                ->andWhere('uf.idAnime = :idAnime')
                ->setParameter('idUser', $user->getId())
                ->setParameter('idAnime', $idAnime)
                ->getQuery()
                ->getOneOrNullResult();
        if ($q !== null) {
            return true;
        }
        return false;
    }

    /**
     * @param $idAnime
     * @param integer $idUser
     * @return null|UsersFavorites
     */
    public function getAnimeFavorite($idAnime, $idUser)
    {
        $q = $this->createQueryBuilder('uf')
                ->select('uf')
                ->where('uf.idAnime = :idAnime')
                ->andWhere('uf.idUser = :idUser')
                ->setParameter('idAnime', $idAnime)
                ->setParameter('idUser', $idUser)
                ->getQuery();

        return $q->getOneOrNullResult();
    }

    public function getUsersFavoriteAnimes(Users $user)
    {
        /** @var ViewsRepository $viewsRepo */
        $viewsRepo = $this->getEntityManager()->getRepository('LoopAnimeShowsBundle:Views');
        /** @var AnimesEpisodesRepository $episodesRepo */
        $episodesRepo = $this->getEntityManager()->getRepository('LoopAnimeShowsBundle:AnimesEpisodes');
        /** @var AnimesSeasonsRepository $seasonsRepo */
        $seasonsRepo = $this->getEntityManager()->getRepository('LoopAnimeShowsBundle:AnimesSeasons');
        $results = $this->createQueryBuilder("users_favorites")
            ->select('users_favorites')
            ->addselect("animes")
            ->join('users_favorites.anime', 'animes')
            ->where('users_favorites.idUser = :idUser')
            ->setParameter('idUser', $user->getId())
            ->groupBy('animes.id')
            ->getQuery()->getArrayResult();

        foreach ($results as &$result) {
            /** @var Animes $anime */
            $anime = $this->getEntityManager()->getRepository('LoopAnimeShowsBundle:Animes')->find($result['anime']['id']);
            $result['tot_seasons'] = $seasonsRepo->getTotSeasons($anime);
            $result['tot_episodes'] = $episodesRepo->getTotEpisodes($anime);
            $result['tot_seen'] = $viewsRepo->getTotViews($user, true, $result['anime']['id']);
            $result['anime'] = $anime;
        }

        return $results;
    }

    public function setAnimeAsFavorite(Users $user, $idAnime) {
        if (!empty($idAnime)) {

            $favorite = $this->isAnimeFavorite($user, $idAnime);

            // If is set remove -- else insert
            if ($favorite) {
                $userFavorite = $this->getAnimeFavorite($idAnime, $user->getId());
                $this->_em->remove($userFavorite);
            } else {

                $anime = $this->getEntityManager()->getRepository('LoopAnimeShowsBundle:Animes')->find($idAnime);

                $userFavorite = new UsersFavorites();
                $userFavorite->setCreateTime(new \DateTime("now"));
                $userFavorite->setIdAnime($idAnime);
                $userFavorite->setAnime($anime);
                $userFavorite->setIdUser($user->getId());
                $this->_em->persist($userFavorite);
            }
            $this->_em->flush();
        }

        return true;
    }

    public function getUserTrackedEpisodes(Users $user, $getQuery = false)
    {
        $query = $this->createQueryBuilder("uf")
                ->select("uf")
                ->join("uf.anime", "a")
                ->join("a.animesSeasons", "ase")
                ->join("ase.animesEpisodes", "ae")
                ->leftJoin('ae.episodeViews', 'views')
                ->where('uf.idUser = :idUser')
                ->setParameter('idUser', $user->getId());

        if ($getQuery) {
            return $query->getQuery();
        } else {
            return $query->getQuery()->getResult();
        }
    }

    public function getTotalAnimeFavorites(Animes $idAnime)
    {
        $query = $this->createQueryBuilder('uf')
                    ->select('uf')
                    ->join('uf.anime', 'a')
                    ->where('a.id = :idAnime')
                    ->setParameter('idAnime', $idAnime->getId())
                    ->getQuery();
        try {
            return $query->getSingleScalarResult();
        } catch (\Exception $e) {
            return 0;
        }
    }
}
